{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "498477b5-c8a5-4dbb-a295-f4d95c93ba07",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Menu:\n",
      "1. Scan a network for active devices\n",
      "2. Scan a single device by IP\n",
      "3. Scan network with MAC vendor information\n",
      "4. Scan ports on a device\n",
      "5. Save results to JSON file\n",
      "6. Continuous network scan\n",
      "7. Multi-threaded network scan\n",
      "8. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter your choice (1-8):  1\n",
      "Enter network range (e.g., 192.168.1.0/24):  192.168.182.0/255\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scanning network: 192.168.182.0/255...\n",
      "\n",
      "Active Devices:\n",
      "IP Address\t\tMAC Address\n",
      "----------------------------------------\n",
      "\n",
      "Menu:\n",
      "1. Scan a network for active devices\n",
      "2. Scan a single device by IP\n",
      "3. Scan network with MAC vendor information\n",
      "4. Scan ports on a device\n",
      "5. Save results to JSON file\n",
      "6. Continuous network scan\n",
      "7. Multi-threaded network scan\n",
      "8. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter your choice (1-8):  5\n",
      "Enter network range to scan (e.g., 192.168.1.0/24):  192.168.182.0/255\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scanning network: 192.168.182.0/255...\n",
      "\n",
      "Active Devices:\n",
      "IP Address\t\tMAC Address\n",
      "----------------------------------------\n",
      "Results saved to network_scan_results.json\n",
      "\n",
      "Menu:\n",
      "1. Scan a network for active devices\n",
      "2. Scan a single device by IP\n",
      "3. Scan network with MAC vendor information\n",
      "4. Scan ports on a device\n",
      "5. Save results to JSON file\n",
      "6. Continuous network scan\n",
      "7. Multi-threaded network scan\n",
      "8. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "Enter your choice (1-8):  8\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exiting...\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import json\n",
    "import nmap\n",
    "import requests\n",
    "from scapy.all import ARP, Ether, srp\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "import pandas as pd\n",
    "\n",
    "def scan_network(network_range):\n",
    "    \"\"\"\n",
    "    Scan the given network range for active devices.\n",
    "    :param network_range: CIDR notation (e.g., '192.168.1.0/24')\n",
    "    \"\"\"\n",
    "    print(f\"Scanning network: {network_range}...\")\n",
    "\n",
    "    # Create ARP request\n",
    "    arp_request = ARP(pdst=network_range)\n",
    "    ether = Ether(dst=\"ff:ff:ff:ff:ff:ff\")\n",
    "    packet = ether / arp_request\n",
    "\n",
    "    # Send packet & receive responses\n",
    "    result = srp(packet, timeout=2, verbose=False)[0]\n",
    "\n",
    "    # Store active devices\n",
    "    devices = []\n",
    "    for sent, received in result:\n",
    "        devices.append({'IP': received.psrc, 'MAC': received.hwsrc})\n",
    "\n",
    "    # Display results\n",
    "    print(\"\\nActive Devices:\")\n",
    "    print(\"IP Address\\t\\tMAC Address\")\n",
    "    print(\"-\" * 40)\n",
    "    for device in devices:\n",
    "        print(f\"{device['IP']}\\t\\t{device['MAC']}\")\n",
    "\n",
    "    return devices\n",
    "\n",
    "def save_results_to_json(devices):\n",
    "    \"\"\"\n",
    "    Save the network scan results to a JSON file.\n",
    "    :param devices: List of active devices.\n",
    "    \"\"\"\n",
    "    with open(\"network_scan_results.json\", \"w\") as json_file:\n",
    "        json.dump(devices, json_file, indent=4)\n",
    "    print(\"Results saved to network_scan_results.json\")\n",
    "\n",
    "def get_mac_vendor(mac):\n",
    "    \"\"\"\n",
    "    Get the manufacturer/vendor information of the device based on MAC address.\n",
    "    :param mac: MAC address of the device.\n",
    "    \"\"\"\n",
    "    url = f\"https://api.macvendors.com/{mac}\"\n",
    "    try:\n",
    "        response = requests.get(url)\n",
    "        return response.text  # Manufacturer name\n",
    "    except requests.exceptions.RequestException:\n",
    "        return \"Unknown\"\n",
    "\n",
    "def scan_network_with_vendor(network_range):\n",
    "    \"\"\"\n",
    "    Scan the network and get vendor info for each device.\n",
    "    :param network_range: CIDR notation (e.g., '192.168.1.0/24')\n",
    "    \"\"\"\n",
    "    print(f\"Scanning network: {network_range}...\")\n",
    "\n",
    "    # Create ARP request\n",
    "    arp_request = ARP(pdst=network_range)\n",
    "    ether = Ether(dst=\"ff:ff:ff:ff:ff:ff\")\n",
    "    packet = ether / arp_request\n",
    "\n",
    "    # Send packet & receive responses\n",
    "    result = srp(packet, timeout=2, verbose=False)[0]\n",
    "\n",
    "    # Display results with vendor information\n",
    "    print(\"\\nActive Devices with Vendor Info:\")\n",
    "    print(\"IP Address\\t\\tMAC Address\\t\\tVendor\")\n",
    "    print(\"-\" * 60)\n",
    "    for sent, received in result:\n",
    "        vendor = get_mac_vendor(received.hwsrc)\n",
    "        print(f\"{received.psrc}\\t\\t{received.hwsrc}\\t\\t{vendor}\")\n",
    "\n",
    "    return result\n",
    "\n",
    "def scan_ports(ip):\n",
    "    \"\"\"\n",
    "    Scan ports of a specific device.\n",
    "    :param ip: IP address of the device to scan for open ports.\n",
    "    \"\"\"\n",
    "    nm = nmap.PortScanner()\n",
    "    nm.scan(ip, '1-1024')  # Scan ports 1-1024\n",
    "    print(f\"Open ports on {ip}:\")\n",
    "    for proto in nm[ip].all_protocols():\n",
    "        print(f\"Protocol: {proto}\")\n",
    "        for port in nm[ip][proto].keys():\n",
    "            print(f\"Port: {port}\\tState: {nm[ip][proto][port]['state']}\")\n",
    "\n",
    "def scan_single_device(ip):\n",
    "    \"\"\"\n",
    "    Scan a specific device by its IP address.\n",
    "    :param ip: IP address of the device to scan.\n",
    "    \"\"\"\n",
    "    print(f\"Scanning single device: {ip}...\")\n",
    "\n",
    "    # Create ARP request for a single IP\n",
    "    arp_request = ARP(pdst=ip)\n",
    "    ether = Ether(dst=\"ff:ff:ff:ff:ff:ff\")  # Broadcast packet\n",
    "    packet = ether / arp_request  # Combine Ethernet & ARP request\n",
    "\n",
    "    # Send packet & receive response\n",
    "    result = srp(packet, timeout=2, verbose=False)[0]\n",
    "\n",
    "    # Display results\n",
    "    if result:\n",
    "        print(f\"\\nDevice found: {result[0][1].psrc} - {result[0][1].hwsrc}\")\n",
    "    else:\n",
    "        print(f\"No device found at IP {ip}\")\n",
    "\n",
    "def continuous_scan(network_range):\n",
    "    \"\"\"\n",
    "    Continuously scan the network for active devices.\n",
    "    :param network_range: CIDR notation (e.g., '192.168.1.0/24')\n",
    "    \"\"\"\n",
    "    while True:\n",
    "        print(f\"\\nScanning network: {network_range}...\")\n",
    "        devices = scan_network(network_range)\n",
    "        time.sleep(5)  # Pause for 5 seconds before the next scan\n",
    "\n",
    "def multi_scan_network(network_range):\n",
    "    \"\"\"\n",
    "    Scan the network in parallel for faster results.\n",
    "    :param network_range: CIDR notation (e.g., '192.168.1.0/24')\n",
    "    \"\"\"\n",
    "    ips = [f\"192.168.1.{i}\" for i in range(1, 255)]  # Adjust range as needed\n",
    "    with ThreadPoolExecutor(max_workers=10) as executor:\n",
    "        results = executor.map(scan_single_device, ips)\n",
    "\n",
    "    for result in results:\n",
    "        if result:\n",
    "            print(f\"IP: {result[0]} \\t MAC: {result[1]}\")\n",
    "\n",
    "def main():\n",
    "    while True:\n",
    "        print(\"\\nMenu:\")\n",
    "        print(\"1. Scan a network for active devices\")\n",
    "        print(\"2. Scan a single device by IP\")\n",
    "        print(\"3. Scan network with MAC vendor information\")\n",
    "        print(\"4. Scan ports on a device\")\n",
    "        print(\"5. Save results to JSON file\")\n",
    "        print(\"6. Continuous network scan\")\n",
    "        print(\"7. Multi-threaded network scan\")\n",
    "        print(\"8. Exit\")\n",
    "\n",
    "        choice = input(\"\\nEnter your choice (1-8): \")\n",
    "\n",
    "        if choice == '1':\n",
    "            network_range = input(\"Enter network range (e.g., 192.168.1.0/24): \")\n",
    "            scan_network(network_range)\n",
    "\n",
    "        elif choice == '2':\n",
    "            ip = input(\"Enter the IP address to scan: \")\n",
    "            scan_single_device(ip)\n",
    "\n",
    "        elif choice == '3':\n",
    "            network_range = input(\"Enter network range (e.g., 192.168.1.0/24): \")\n",
    "            scan_network_with_vendor(network_range)\n",
    "\n",
    "        elif choice == '4':\n",
    "            ip = input(\"Enter the IP address to scan ports: \")\n",
    "            scan_ports(ip)\n",
    "\n",
    "        elif choice == '5':\n",
    "            devices = scan_network(input(\"Enter network range to scan (e.g., 192.168.1.0/24): \"))\n",
    "            save_results_to_json(devices)\n",
    "\n",
    "        elif choice == '6':\n",
    "            network_range = input(\"Enter network range for continuous scan (e.g., 192.168.1.0/24): \")\n",
    "            continuous_scan(network_range)\n",
    "\n",
    "        elif choice == '7':\n",
    "            network_range = input(\"Enter network range for multi-threaded scan (e.g., 192.168.1.0/24): \")\n",
    "            multi_scan_network(network_range)\n",
    "\n",
    "        elif choice == '8':\n",
    "            print(\"Exiting...\")\n",
    "            break\n",
    "\n",
    "        else:\n",
    "            print(\"Invalid choice, please try again.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22f52064-ef72-4629-b2d0-1e75ccfc7e0e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
